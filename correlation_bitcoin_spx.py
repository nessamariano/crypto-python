# -*- coding: utf-8 -*-
"""correlation-bitcoin-spx.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DaESPA4q37xzF5Z81iUryTuiGw6gzI3G
"""

#pip install investpy
#pip install yfinance
#!pip install cufflinks

#Importando as bibliotecas
import pandas as pd
import numpy as np
from datetime import datetime
import yfinance as yf
import matplotlib.pyplot as plt
import investpy as inv
from pandas_datareader import data as pdr
import seaborn as sns
import cufflinks as cf

plt.style.use('fivethirtyeight')
#https://matplotlib.org/stable/gallery/style_sheets/fivethirtyeight.html

btc_data =  yf.download("BTC-USD", start="2017-01-01", end="2022-08-10")
nasq_data =  yf.download("^IXIC", start="2017-01-01", end="2022-08-10")
spx_data =  yf.download("^GSPC", start="2017-01-01", end="2022-08-10")

corr_data = yf.download("BTC-USD ^IXIC ^GSPC", start="2017-01-01", end="2022-08-10")

corr_data.tail()

corr_data.shape

x = 'BTC-USD'
btc_data['Nome'] = x
btc_data

y = 'S&P 500'
spx_data['Nome'] = y

z = 'Nasdaq'
nasq_data['Nome'] = z

btc_data.tail()

nasq_data.tail()

spx_data.tail()

corr_data.isna().sum()

corr_data['Close'].isna()

corr_data.dropna(inplace=True)

corr_data.shape

corr_data.isna().sum()

BTCNasdaqSPX = corr_data['Close']
BTCNasdaqSPX

#corr = BTCNasdaqSPX.loc['^GSPC'] = 'S&P 500'
#corr = BTCNasdaqSPX.loc['^IXIC'] = 'Nasdaq'

BTCNasdaqSPX.describe().T

from scipy.stats.stats import pearsonr

btc_pear = BTCNasdaqSPX['BTC-USD']
SPX_pear = BTCNasdaqSPX['^GSPC']
nasdaq_pear =BTCNasdaqSPX['^IXIC']


coeficiente_pearsonr, p_valor = pearsonr(btc_pear, nasdaq_pear)
print('PearsonR Correlation Coefficient {:0.3}'.format(coeficiente_pearsonr))

coeficiente_pearsonr, p_valor = pearsonr(SPX_pear, nasdaq_pear)
print('PearsonR Correlation Coefficient {:0.3}'.format(coeficiente_pearsonr))

coeficiente_pearsonr, p_valor = pearsonr(btc_pear, SPX_pear)
print('PearsonR Correlation Coefficient {:0.3}'.format(coeficiente_pearsonr))

np.corrcoef(BTCNasdaqSPX['BTC-USD'], BTCNasdaqSPX['^GSPC'])

np.corrcoef(BTCNasdaqSPX['BTC-USD'], BTCNasdaqSPX['^IXIC'])

corr = BTCNasdaqSPX.corr()
print(corr)

sns.pairplot(BTCNasdaqSPX);

sns.heatmap(BTCNasdaqSPX.corr());

sns.heatmap(corr, xticklabels=corr.columns.values, yticklabels=corr.columns.values)

sns.scatterplot(x=BTCNasdaqSPX['BTC-USD'],y=BTCNasdaqSPX['^GSPC'])

sns.regplot(x=BTCNasdaqSPX['BTC-USD'],y=BTCNasdaqSPX['^GSPC'])

sns.scatterplot(x=BTCNasdaqSPX['BTC-USD'],y=BTCNasdaqSPX['^IXIC']);

sns.regplot(x=BTCNasdaqSPX['BTC-USD'],y=BTCNasdaqSPX['^IXIC']);

fig = plt.figure(figsize=(15, 10))
plt.plot(BTCNasdaqSPX['BTC-USD'], color='green')
plt.plot(BTCNasdaqSPX['^GSPC'], color='red')
plt.plot(BTCNasdaqSPX['^IXIC'], color='black')
plt.legend(labels=['BTC-USD', '^GSPC', '^IXIC'])
plt.title('Valores Apurados em relação ao tempo')
plt.ylabel('Pontuação no índice')
plt.xlabel('Data')
plt.show()

#Coeficiente de Pearson para variáveis não lineares e que não tem distribuição normal, que não é esse caso.

from scipy.stats import spearmanr

coeficiente_spearmanr, p_valor = spearmanr(btc_pear, nasdaq_pear)
print('Spearman Rank Correlation Coefficient {:0.3}'.format(coeficiente_spearmanr))

coeficiente_spearmanr, p_valor = spearmanr(btc_pear, SPX_pear)
print('Spearman Rank Correlation Coefficient {:0.3}'.format(coeficiente_spearmanr))

coeficiente_spearmanr, p_valor = spearmanr(SPX_pear, nasdaq_pear)
print('Spearman Rank Correlation Coefficient {:0.3}'.format(coeficiente_spearmanr))

#Teste do Qui-Quadrado, se p_value for acima de 0.05 indica que são variáveis correlacionadas, abaixo não são correlacionadas.

table = pd.crosstab(btc_pear, nasdaq_pear)

from scipy.stats import chi2_contingency
chi2, p, dof, expected = chi2_contingency(table.values)
print('Chi-square Statistic {:0.3} p_value {:0.3}'.format(chi2, p))

table1 = pd.crosstab(btc_pear, SPX_pear)

from scipy.stats import chi2_contingency
chi2, p, dof, expected = chi2_contingency(table1.values)
print('Chi-square Statistic {:0.3} p_value {:0.3}'.format(chi2, p))

table2 = pd.crosstab(SPX_pear, nasdaq_pear)

from scipy.stats import chi2_contingency
chi2, p, dof, expected = chi2_contingency(table2.values)
print('Chi-square Statistic {:0.3} p_value {:0.3}'.format(chi2, p))

#table = pd.crosstab(btc_pear, nasdaq_pear)
#table

BTCNasdaqSPX.boxplot();

#Aplicando a identificação de outlier de Tukey
pd.options.display.float_format = '{:.2f}'.format
X_df = pd.DataFrame(BTCNasdaqSPX['BTC-USD'])
sumario = X_df.describe()
print(sumario)

btc_databox = pd.DataFrame(btc_data['Close'])
btc_databox.boxplot();

#Calculando os limites inferior e superior do Intervalo entre quartis
sumario.index

sumario.mean()

sumario.median()

sumario.min()

sumario.max()

iqr = sumario.loc['75%'] - sumario.loc['25%']
iqr

#Identificando outliers abaixo do mínimo
limite_inf = sumario.loc['25%'] - iqr * 1.5 
limite_inf

#Verificar esse outlier no mínimo

#Identificando outliers acima de 64.614
limite_sup = sumario.loc['75%'] + iqr * 1.5 
limite_sup

#btc_outliers = btc_databox['Close'] > 65000000
#btc_outliers

#Verificar novamente sobre o método de DBSCAN e array 1D
from sklearn.cluster import DBSCAN
from collections import Counter

#btc_databox

#Depois verificar sobre arrays 1D para métodos de BDSCAN

#df = btc_data['Close']
#cols = ['Close']
#df.columns = cols
#X = df[cols[0]].values
#y = df['Nome'].values

#modelo = DBSCAN(eps=0.8, min_samples=19).fit(X)
#print(modelo)

#cores = modelo.labels_

#plt.scatter(X[:,2], X[:,1], c=cores, s=120)
#plt.xlabel('Comprimento da Pétala')
#plt.ylabel('Largura da Cepa')
#plt.title('DBScan para detecção de Outlier')
#plt.show()

#outliers_df = pd.DataFrame(X)

#print(Counter(modelo.labels_))

#print(outliers_df[modelo.labels_ ==-1])

btc_datavol = pd.DataFrame(btc_data['Volume'])
btc_datavol.plot();

nasq_datavol = pd.DataFrame(nasq_data['Volume'])
nasq_datavol.plot();

spx_datavol = pd.DataFrame(spx_data['Volume'])
spx_datavol.plot();

fig = plt.figure(figsize=(15, 10))
plt.plot(btc_datavol, color='green')
plt.plot(nasq_datavol, color='red')
plt.plot(spx_datavol, color='black')
plt.legend(labels=['BTC-USD', 'SPX', 'Nasdaq'])
plt.title('Valores Apurados em relação ao tempo')
plt.ylabel('Volume em $')
plt.xlabel('Data')
plt.show()













